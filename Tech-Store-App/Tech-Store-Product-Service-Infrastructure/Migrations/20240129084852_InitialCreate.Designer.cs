// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tech_Store_Product_Service_Infrastructure.DataContexts;

#nullable disable

namespace Tech_Store_Product_Service_Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240129084852_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductBrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VisualsId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Tech_Store_Product_Service_Domain.Entities.Product.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("LongDescription")
                                .HasColumnType("text");

                            b1.Property<string>("ShortDescription")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tech_Store_Product_Service_Domain.Entities.Product.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("LongName")
                                .HasColumnType("text");

                            b1.Property<string>("ShortName")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Price", "Tech_Store_Product_Service_Domain.Entities.Product.Price#Price", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductBrandId");

                    b.HasIndex("ProductGroupId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("VisualsId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductBrand", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tech_Store_Product_Service_Domain.Entities.ProductBrand.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("LongName")
                                .HasColumnType("text");

                            b1.Property<string>("ShortName")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("Brands", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tech_Store_Product_Service_Domain.Entities.ProductGroup.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("LongName")
                                .HasColumnType("text");

                            b1.Property<string>("ShortName")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.ToTable("ProductGroups", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductSpecification", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductId");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id", "Name");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.HasIndex("ProductTypeId", "CategoryName");

                    b.ToTable("ProductSpecifications", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductSpecificationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("ProductTypeId");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id", "Name");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("ProductSpecificationCategories", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductGroupId")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "Tech_Store_Product_Service_Domain.Entities.ProductType.Name#Name", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("LongName")
                                .HasColumnType("text");

                            b1.Property<string>("ShortName")
                                .IsRequired()
                                .HasColumnType("text");
                        });

                    b.HasKey("Id");

                    b.HasIndex("ProductGroupId");

                    b.ToTable("ProductTypes", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.Visuals", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MainPictureURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Visuals", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.VisualsPictureSource", b =>
                {
                    b.Property<string>("PictureURL")
                        .HasColumnType("text");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("VisualsId");

                    b.HasKey("PictureURL");

                    b.HasIndex("Id");

                    b.ToTable("VisualsPictureSources", (string)null);
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.Product", b =>
                {
                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductBrand", "ProductBrand")
                        .WithMany()
                        .HasForeignKey("ProductBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.Visuals", "Visuals")
                        .WithMany()
                        .HasForeignKey("VisualsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductBrand");

                    b.Navigation("ProductGroup");

                    b.Navigation("ProductType");

                    b.Navigation("Visuals");
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductSpecification", b =>
                {
                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.Product", null)
                        .WithMany("Specifications")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductSpecificationCategory", "Category")
                        .WithMany()
                        .HasForeignKey("ProductTypeId", "CategoryName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductSpecificationCategory", b =>
                {
                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductType", "ProductType")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.ProductType", b =>
                {
                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.ProductGroup", "ProductGroup")
                        .WithMany()
                        .HasForeignKey("ProductGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductGroup");
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.VisualsPictureSource", b =>
                {
                    b.HasOne("Tech_Store_Product_Service_Domain.Entities.Visuals", null)
                        .WithMany("PictureSources")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.Product", b =>
                {
                    b.Navigation("Specifications");
                });

            modelBuilder.Entity("Tech_Store_Product_Service_Domain.Entities.Visuals", b =>
                {
                    b.Navigation("PictureSources");
                });
#pragma warning restore 612, 618
        }
    }
}
